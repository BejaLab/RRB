
configfile: "config/config.yaml"

rule domain_translate:
    input:
        "input/codons/domains/{domain}.fasta"
    output:
        "analysis/codons/mafft/{domain}_translated.fasta"
    conda:
        "envs/tools.yaml"
    shell:
        "seqkit translate -o {output} {input}"

rule domain_mafft:
    input:
        "analysis/codons/mafft/{domain}_translated.fasta"
    output:
        "analysis/codons/mafft/{domain}_translated.mafft"
    params:
        lambda w: config[w.domain]['mafft']
    conda:
        "envs/tools.yaml"
    shell:
        "mafft {params} {input} > {output}"

rule domain_backtrans:
    input:
        mafft = "analysis/codons/mafft/{domain}_translated.mafft",
        codons = "input/codons/domains/{domain}.fasta"
    output:
        "analysis/codons/alignments/{domain}.fasta"
    conda:
        "envs/tools.yaml"
    shell:
        "trimal -backtrans {input.codons} -in {input.mafft} -out {output}"

rule select_long:
    input:
        "analysis/codons/alignments/{domain}_no_outgroups_CODON.fasta"
    output:
        "analysis/codons/lists/{domain}_long.txt"
    params:
        min_len = lambda w: config[w.domain]['long_min_len']
    conda:
        "envs/tools.yaml"
    shell:
        "seqkit seq -nigm {params.min_len} {input} -o {output}"

rule gard_fasta:
    input:
        fasta = "analysis/codons/alignments/{domain}_no_outgroups_CODON.fasta",
        long_txt = "analysis/codons/lists/{domain}_long.txt"
    output:
        "analysis/codons/alignments/{domain}_CODON_recomb.fasta"
    params:
        r = lambda w: config[w.domain]['gard_range']
    conda:
        "envs/tools.yaml"
    shell:
        "seqkit grep -rf {input.long_txt} {input.fasta} | seqkit subseq -r {params.r} -o {output}"

rule gard_hyphy:
    input:
        "analysis/codons/alignments/{domain}_CODON_recomb.fasta"
    output:
        "analysis/codons/gard/{domain}_CODON_recomb.fasta.best-gard",
        "analysis/codons/gard/{domain}_CODON_recomb.fasta.best-gard.fit.bf",
        "analysis/codons/gard/{domain}_CODON_recomb.fasta.GARD.json"
    params:
        output_dir = "analysis/codons/gard"
    threads:
        4
    log:
        "analysis/codons/gard/{domain}.log"
    shadow:
        "minimal"
    conda:
        "envs/tools.yaml"
    shell:
        """
        hyphy GARD --type nucleotide --rv Gamma --alignment {input} CPU={threads} &> {log}
        mv {input}.best-gard {input}.best-gard.fit.bf {input}.GARD.json {params.output_dir}
        """

rule geneconv:
    input:
        "analysis/codons/alignments/{domain}_CODON_recomb.fasta"
    output:
        "analysis/codons/geneconv/{domain}_CODON_recomb.frags"
    params:
        seed = 123,
        prefix = "analysis/codons/alignments/{domain}_CODON_recomb"
    shadow:
        "minimal"
    log:
        "analysis/codons/geneconv/{domain}.log"
    shell:
        """
        geneconv {input} -nolog -Seed={params.seed} -Gscale=1 -WideCols &> {log}
        mv {params.prefix}.frags {output}
        """

rule plot_recombination:
    input:
        fasta    = "analysis/codons/alignments/{domain}_CODON_recomb.fasta",
        geneconv = "analysis/codons/geneconv/{domain}_CODON_recomb.frags",
        gard     = "analysis/codons/gard/{domain}_CODON_recomb.fasta.GARD.json",
        metadata = "input/codons/metadata/metadata.xlsx",
        TMs      = "input/codons/metadata/{domain}_codon_TMs.tsv",
        RB_groups = "input/codons/metadata/RB-groups.txt"
    output:
        "output/codons/{domain}_recombination.svg"
    conda:
        "envs/r.yaml"
    script:
        "scripts/plot_recombination.R"

rule select_too_short_domains:
    input:
        "analysis/codons/alignments/{domain}.fasta"
    output:
        "analysis/codons/lists/{domain}_too_short.txt"
    params:
        max_len = 100
    conda:
        "envs/tools.yaml"
    shell:
        "seqkit seq -gM {params.max_len} {input} | seqkit seq -ino {output}"

rule sequences_core:
    input:
        fasta = "analysis/codons/alignments/{domain}.fasta",
        core = "input/codons/metadata/core-sequences.txt"
    output:
        "analysis/codons/alignments/{domain}_core_CODON.fasta"
    conda:
        "envs/tools.yaml"
    shell:
        "cut -f1 {input.core} | seqkit grep -rf - -o {output} {input.fasta}"

rule sequences_subset:
    input:
        fasta = "analysis/codons/alignments/{domain}_core_CODON.fasta",
        txt = "input/codons/metadata/{domain}_outliers_subset.txt"
    output:
        "analysis/codons/alignments/{domain}_subset_CODON.fasta",
    conda:
        "envs/tools.yaml"
    shell:
        "seqkit grep -rvf {input.txt} -o {output} {input.fasta}"

rule sequences_no_outgroups:
    input:
        fasta = "analysis/codons/alignments/{domain}.fasta",
        txt = "input/codons/metadata/{domain}_outgroups.txt"
    output:
        "analysis/codons/alignments/{domain}_no_outgroups_CODON.fasta"
    conda:
        "envs/tools.yaml"
    shell:
        "seqkit grep -vrf {input.txt} {input.fasta} -o {output}"

rule sequences_only_outgroups:
    input:
        fasta = "analysis/codons/alignments/{domain}.fasta",
        txt = "input/codons/metadata/{domain}_outgroups.txt"
    output:
        "analysis/codons/alignments/{domain}_only_outgroups_CODON.fasta"
    shell:
        "seqkit grep -rf {input.txt} {input.fasta} -o {output}"

rule sequences_with_outgroups:
    input:
        "analysis/codons/alignments/{domain}_only_outgroups_CODON.fasta",
        "analysis/codons/alignments/{domain}_{set}_CODON.fasta"
    output:
        "analysis/codons/alignments/{domain}_{set}_with_outgroups_CODON.fasta"
    conda:
        "envs/tools.yaml"
    shell:
        "seqkit seq -o {output} {input}"

rule translate:
    input:
        "analysis/codons/alignments/{prefix}_CODON.fasta"
    output:
        "analysis/codons/alignments/{prefix}_NT2AA.fasta"
    conda:
        "envs/tools.yaml"
    shell:
        "seqkit translate -o {output} {input}"

rule raxml_evaluate:
    input:
        fasta  = "analysis/codons/alignments/{prefix}_{type}.fasta",
        iqtree = "analysis/codons/iqtree/{prefix}_CODON.treefile"
    output:
        "analysis/codons/raxml_evaluate/{prefix}_{type}.raxml.bestTree",
        "analysis/codons/raxml_evaluate/{prefix}_{type}.raxml.bestModel"
    params:
        prefix = "analysis/codons/raxml_evaluate/{prefix}_{type}",
        seed = 123,
        model = lambda w: config['raxml_models'][w.type]
    log:
        "logs/{prefix}_{type}_raxml_evaluate.log"
    conda:
        "envs/raxml-ng.yaml"
    shell:
        "raxml-ng --redo --evaluate --msa {input.fasta} --tree {input.iqtree} --model {params.model} --seed {params.seed} --prefix {params.prefix} &> {log}"

rule root_digger:
    input:
        fasta = "analysis/codons/alignments/{prefix}_CODON.fasta",
        tree  = "analysis/codons/raxml_evaluate/{prefix}_CODON.raxml.bestTree",
        model = "analysis/codons/raxml_evaluate/{prefix}_CODON.raxml.bestModel"
    output:
        "analysis/codons/root_digger/{prefix}_CODON.raxml.bestTree.lwr.tree",
        "analysis/codons/root_digger/{prefix}_CODON.raxml.bestTree.rooted.tree"
    params:
        dir = "analysis/codons/root_digger"
    threads:
        30
    shadow:
        "minimal"
    log:
        "logs/{prefix}_root_digger.log"
    shell:
        """
        rd --msa {input.fasta} --tree {input.tree} --exhaustive --threads {threads} &> {log}
        mv {input.tree}.lwr.tree {input.tree}.rooted.tree {params.dir}/
        """

rule epa:
    input:
        fasta = "analysis/codons/alignments/{domain}_{set}_{type}.fasta",
        tree  = "analysis/codons/raxml_evaluate/{domain}_{set}_{type}.raxml.bestTree",
        model = "analysis/codons/raxml_evaluate/{domain}_{set}_{type}.raxml.bestModel",
        outgroup = "analysis/codons/alignments/{domain}_only_outgroups_{type}.fasta"
    output:
        "analysis/codons/epa/{domain}_{set}_with_outgroups_{type}/epa_result.jplace"
    params:
        dir = "analysis/codons/{domain}_{set}_with_outgroups_{type}"
    log:
        "logs/epa_{domain}_{set}_{type}.log"
    conda:
        "envs/raxml-ng.yaml"
    shell:
        "epa-ng --redo -s {input.fasta} -t {input.tree} --model {input.model} -q {input.fasta_outgroups} -w {params.dir} &> {log}"

rule trim_lowercase:
    input:
        "analysis/codons/alignments/{prefix}_CODON.fasta"
    output:
        "analysis/codons/alignments/{prefix}_CODON_trim.fasta"
    conda:
        "envs/tools.yaml"
    shell:
        "seqkit replace -sp [a-z] -r - -o {output} {input}"

rule iqtree_protein:
    input:
        fasta = "analysis/codons/alignments/{prefix}_CODON_trim.fasta"
    output:
        "analysis/codons/iqtree/{prefix}_NT2AA_protein.treefile"
    params:
        seed = 123,
        B = 1000,
        prefix = "analysis/codons/iqtree/{prefix}_NT2AA_protein"
    threads:
        4
    log:
        "logs/iqtree_protein_{prefix}.log"
    conda:
        "envs/tools.yaml"
    shell:
        "iqtree2 -seed {params.seed} -s {input.fasta} -st NT2AA -B {params.B} -T {threads} --prefix {params.prefix} -redo &> {log}"

rule iqtree:
    input:
        "analysis/codons/alignments/{prefix}_CODON_trim.fasta"
    output:
        "analysis/codons/iqtree/{prefix}_{type}.treefile"
    params:
        seed = 123,
        B = 1000,
        prefix = "analysis/codons/iqtree/{prefix}_{type}"
    threads:
        4
    log:
        "logs/iqtree_{prefix}_{type}.log"
    conda:
        "envs/tools.yaml"
    shell:
        "iqtree2 -seed {params.seed} -s {input} -st {wildcards.type} -B {params.B} -T {threads} --prefix {params.prefix} -redo &> {log}"

rule root_iqtree:
    input:
        tree = "analysis/codons/{dir}/{domain}_{set}_with_outgroups_{type}.treefile",
        outgroups = "input/codons/metadata/{domain}_outgroups.txt"
    output:
        "analysis/codons/{dir}/{domain}_{set}_with_outgroups_{type}.treefile.rooted"
    shell:
        "xargs nw_reroot -ls {input.tree} < {input.outgroups} > {output}"

rule iqtree_estimate:
    input:
        fasta = "analysis/codons/alignments/{prefix}_CODON_trim.fasta",
        tree  = "analysis/codons/iqtree/{prefix}_CODON.treefile"
    output:
        "analysis/codons/iqtree_estimate/{prefix}_NT2AA.treefile"
    params:
        seed = 123,
        prefix = "analysis/codons/iqtree_estimate/{prefix}_NT2AA"
    threads:
        2
    log:
        "logs/iqtree_estimate_{prefix}.log"
    conda:
        "envs/tools.yaml"
    shell:
        "iqtree2 -seed {params.seed} -s {input.fasta} -st NT2AA -z {input.tree} -te {input.tree} -T {threads} --prefix {params.prefix} -redo &> {log}"

rule plot_root:
    input:
        clades = "input/codons/metadata/bestrhodopsin_clades.txt",
        best_core         = "analysis/codons/iqtree/bestrophins_core_CODON.treefile",
        best_subset       = "analysis/codons/iqtree/bestrophins_subset_CODON.treefile",
        best_subset_nt2aa = "analysis/codons/iqtree_estimate/bestrophins_subset_NT2AA.treefile",
        best_core_raxml_nwk   = "analysis/codons/root_digger/bestrophins_core_CODON.raxml.bestTree.rooted.tree",
        best_core_raxml_nhx   = "analysis/codons/root_digger/bestrophins_core_CODON.raxml.bestTree.lwr.tree",
        best_subset_raxml_nwk = "analysis/codons/root_digger/bestrophins_subset_CODON.raxml.bestTree.rooted.tree",
        best_subset_raxml_nhx = "analysis/codons/root_digger/bestrophins_subset_CODON.raxml.bestTree.lwr.tree",
        best_w_outgroups_nt2_rooted = "analysis/codons/iqtree/bestrophins_core_with_outgroups_NT2AA_protein.treefile.rooted",
        rhod_w_outgroups_rooted     = "analysis/codons/iqtree/rhodopsins_core_with_outgroups_CODON.treefile.rooted",
        rhod_w_outgroups_nt2_rooted = "analysis/codons/iqtree_estimate/rhodopsins_core_with_outgroups_NT2AA.treefile.rooted"
    output:
        "output/codons/rooted_trees.svg"
    conda:
        "envs/r.yaml"
    script:
        "scripts/plot_root.R"
